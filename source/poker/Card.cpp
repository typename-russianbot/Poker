#include "../../includes/poker/Card.h"

//& Resources
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Card(const string)
//* @def: Constructor

Card::Card(const string filename) : mVisible(true)
{
    //? @note: Verify Texture
    if (!mTexture.loadFromFile(filename))
        exit(1);

    //? @note: Initialize Sprite
    mSprite.setTexture(mTexture);
    mSprite.setOrigin(mSprite.getGlobalBounds().width / 2.f, mSprite.getGlobalBounds().height / 2.f);
    mSprite.setPosition(DISPLAY.width / 2.f, DISPLAY.height / 2.f);

    //? Card Type Assignment
    if (filename.find("two") != string::npos)
        mRank = Two;
    else if (filename.find("three") != string::npos)
        mRank = Three;
    else if (filename.find("four") != string::npos)
        mRank = Four;
    else if (filename.find("five") != string::npos)
        mRank = Five;
    else if (filename.find("six") != string::npos)
        mRank = Six;
    else if (filename.find("seven") != string::npos)
        mRank = Seven;
    else if (filename.find("eight") != string::npos)
        mRank = Eight;
    else if (filename.find("nine") != string::npos)
        mRank = Nine;
    else if (filename.find("ten") != string::npos)
        mRank = Ten;
    else if (filename.find("ace") != string::npos)
        mRank = Ace;
    else if (filename.find("jack") != string::npos)
        mRank = Jack;
    else if (filename.find("queen") != string::npos)
        mRank = Queen;
    else if (filename.find("king") != string::npos)
        mRank = King;
    else
        exit(1);

    return;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: ~Card(void)
//* @def: Destructor

Card::~Card(void) { return; }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: move(const Vector2f)
//* @def: moves card

void Card::move(const Vector2f offset)
{
    mSprite.move(offset);
    return;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: visible(const bool)
//* @def: toggles visibility of card

void Card::visible(const bool flag)
{
    if (flag)
        mVisible = flag;
    else
        mVisible = flag;

    return;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: isVisible(void)
//* @def: returns true if visible, false otherwise

const bool Card::isVisible(void) const
{
    return mVisible;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////s

//& Mutators
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setPosition(const Vector2f)
//* @def: sets cards' position

void Card::setPosition(const Vector2f pos)
{
    mSprite.setPosition(pos);
    return;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setCardType(const Type)
//* @def: sets cards' type

void Card::setCardType(const Rank type)
{
    mRank = type;
    return;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Accessors
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getPosition(void)
//* @def: returns cards' position

const Vector2f Card::getPosition(void) const
{
    return mSprite.getPosition();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getCardType(void)
//* @def: returns cards' type

const Rank Card::getCardType(void) const
{
    return mRank;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Overloads
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: operator=
//* @def: '=' overload

Card &Card::operator=(const Card &other)
{
    this->mRank = other.mRank;
    this->mVisible = other.mVisible;
    this->mTexture = other.mTexture;
    this->mSprite = other.mSprite;

    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
