#include "../master.h"
#pragma once

#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <SFML/Window/Keyboard.hpp>
#include <SFML/OpenGL.hpp>
using namespace sf;

//~ @class: Card
class Card : public Drawable
{
private:
    //& Components
    Texture mTexture;
    Sprite mSprite;
    Suit mSuit;
    Rank mRank;

    //& Flags
    bool mVisible;

public:
    //& Resources
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Constructor
    Card(const string);

    //* @public: Destructor
    ~Card(void);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: draw(RenderTarget&, RenderStates)
    virtual void draw(RenderTarget &target, RenderStates states) const override
    {
        if (mVisible)
            target.draw(mSprite, states);

        return;
    }

    //* @public: move(const Vector2f)
    void move(const Vector2f);

    //* @public: visible(const bool)
    void visible(const bool);

    //* @public: isVisible(void)
    const bool isVisible(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Mutators
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setPosition(const Vector2f)
    void setPosition(const Vector2f);

    //* @public: setCardType(const Type)
    void setCardType(const Rank);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Accessors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getPosition(void)
    const Vector2f getPosition(void) const;

    //* @public: getCardType(void)
    const Rank getCardType(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Overloads
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: operator<<
    friend ostream &operator<<(ostream &, Card);

    //* @public; operator=
    Card &operator=(const Card &);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
