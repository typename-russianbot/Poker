#include "../master.h"
#pragma once

//~ @class: Card
class Card : public Drawable
{
private:
    //& Components
    Texture mTexture;
    Sprite mSprite;
    CardType mCardType;

    //& Flags
    bool mVisible;

public:
    //& Resources
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Constructor
    Card(const string);

    //* @public: Copy Constructor
    Card(const Card &);

    //* @public: Destructor
    ~Card(void);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: draw(RenderTarget&, RenderStates)
    virtual void draw(RenderTarget &target, RenderStates states) const override
    {
        if (mVisible)
            target.draw(mSprite, states);

        return;
    }

    //* @public: move(const Vector2f)
    void move(const Vector2f);

    //* @public: visible(const bool)
    void visible(const bool);

    //* @public: isVisible(void)
    const bool isVisible(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Mutators
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setPosition(const Vector2f)
    void setPosition(const Vector2f);

    //* @public: setCardType(const Type)
    void setCardType(const CardType);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Accessors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getPosition(void)
    const Vector2f getPosition(void) const;

    //* @public: getCardType(void)
    const CardType getCardType(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Overloads
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public; operator=
    Card &operator=(const Card &);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

//~ @class: Suit
class Suit : public Drawable
{
private:
    //& Components
    vector<pair<Drawable *, Vector2f>> mCards;
    SuitType mSuitType;

    //& Flags
    bool mVisible;

public:
    //& Resources
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Constructor
    Suit(const SuitType);

    //* @public: Destructor
    ~Suit(void);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: draw(RenderTarget&, RenderStates)
    virtual void draw(RenderTarget &target, RenderStates states) const override
    {
        if (mVisible)
        {
            for (auto &[drawable, offset] : mCards)
            {
                states.transform.translate(offset);
                target.draw(*drawable, states);
            }
        }
        return;
    }

    //* @public: move(const Vector2f)
    void move(const Vector2f);

    //* @public: add(Drawable*, Vector2f)
    void add(Drawable *, Vector2f = {0, 0});

    //* @public: visible(const bool)
    void visible(const bool);

    //* @public: isVisible(void)
    const bool isVisible(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Mutators
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Accessors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
