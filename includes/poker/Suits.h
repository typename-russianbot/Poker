#include "../master.h"
#pragma once

//~ @class: Card
class Card : public Drawable
{
private:
    //& Components
    Texture mTexture;
    Sprite mSprite;
    Type mCardType;

    //& Flags
    bool mVisible;

public:
    //& Resources
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Constructor
    Card(const string = "resources/textures/Clubs/two.png");

    //* @public: Copy Constructor
    Card(const Card &);

    //* @public: Destructor
    ~Card(void);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: draw(RenderTarget&, RenderStates)
    virtual void draw(RenderTarget &target, RenderStates states) const override
    {
        if (mVisible)
        {
            target.draw(mSprite, states);
        }
        return;
    }

    //* @public: move(const Vector2f)
    void move(const Vector2f);

    //* @public: visible(const bool)
    void visible(const bool);

    //* @public: isVisible(void)
    const bool isVisible(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Mutators
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setPosition(const Vector2f)
    void setPosition(const Vector2f);

    //* @public: setCardType(const Type)
    void setCardType(const Type);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Accessors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getPosition(void)
    const Vector2f getPosition(void) const;

    //* @public: getCardType(void)
    const Type getCardType(void) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Overloads
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public; operator=
    Card &operator=(const Card &);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

//~ @class: Clubs
class Club : public Drawable
{
private:
    //& Components
    Card mCards[13];
    Suit mSuit;

    //& Flags
    bool mVisible;

public:
    //& Resources
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Constructor
    Club(void);

    //* @public: Destructor
    ~Club(void);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: draw(RenderTarget&, RenderStates)
    virtual void draw(RenderTarget &target, RenderStates states) const override
    {
        if (mVisible)
        {
            for (int i = 0; i < 13; i++)
            {
                target.draw(mCards[i]);
            }
        }
        return;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Mutators
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //& Accessors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

//~ @class: Diamonds
class Diamonds : public Club
{
private:
    //& Resources

    //& Functions

    //& Mutators

    //& Accessors
};

//~ @class: Hearts
class Hearts : public Club
{
public:
    //& Resources

    //& Functions

    //& Mutators

    //& Accessors
};

//~ @class: Spades
class Spades : public Club
{
public:
    //& Resources

    //& Functions

    //& Mutators

    //& Accessors
};